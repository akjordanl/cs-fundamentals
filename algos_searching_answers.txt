Short Answer
1. Searing a playlist alphabetical by scrolling down until you find the song you are looking for

2. Searching the same playlist by clicking on the index on the right that allows you to jump to a certain letter is kind of like binary search as a first step. You cut the list to be searched to anything after the first song in the letter you choose. Then you do a linear search from then on

3. 7

4. Given the same sorted abcdefg collection, it would take 3 steps to find g with binary search. The algo would jump to d, then, f, then find g
Note: my bad, I thought we were talking about the whole alphabet in my previous answer!\

5. Binary isn’t good for unsorted, so I’d choose linear. The reason it isn't good is because once it gets to the midpoint, what do you tell it to do next? Go up to the second half? Since its unsorted it won't necessarily make sense, there will be bigger and smaller items there. Go down? Same problem.

6. Binary is good for sorted, much more efficient than linear, so I’d go for binary. Since its sorted, the algorithm knows where to go from the midpoint, and with each step cuts down 1/2 the dataset, which cuts down many iterations every time you can eliminate a big swatch of space to search.

Programming assignment
1.

function binarySearch (dictionary, word) {
  var lo = 0;
  var hi = dictionary.length - 1;

  while ( lo <= hi ) {
    var mid = Math.floor( (lo + hi ) / 2 );
    if ( dictionary[mid] === word ) {
      return word + " is at index " + mid;
    } else if (dictionary[mid] > word) {
      hi = mid;
    } else if (dictionary[mid] < word) {
      lo = mid;
    } else {return mid;}
  }
  return "Word not found"
}

console.log(binarySearch(['aaaa', 'ab', 'albatross', 'dick', 'err', 'zzzz'], 'zzzz'));
// Word not found
console.log(binarySearch(['aaaa', 'ab', 'albatross', 'dick', 'err', 'zzzz'], 'asdasfd'));
//Word not found

var wordTest = "d";
var dictionaryTest = ["a","b","c","d",
                      "e","f","g","h",
                      "i","j","k","l",
                      "m","n","o","p",
                      "q","r","s","t",
                      "u","v","w","x",
                      "y","z"];


var result = binarySearch(dictionaryTest, wordTest);
console.log(result);
// d is at index 3

/* The reason the word comparison works is
JavaScript uses the so-called “dictionary”
or “lexicographical” order. In other words,
strings are compared letter-by-letter. */

2.
var fish = [{name: "harry", type: "red-spotted goldfish"},
            {name: "johnny", type: "green-spotted goldfish"},
            {name: "alex", type: "yellow-spotted goldfish"},
            {name: "jerry", type: "red-spotted goldfish"},
            {name: "nicolas", type: "orange-spotted goldfish"},
            {name: "kevin", type: "white-spotted goldfish"},
            {name: "james", type: "green-spotted goldfish"},
            {name: "lucas", type: "yellow-spotted goldfish"}];

var fishWanted = "white-spotted goldfish";

function findFish (group, targetType) {
  for (i = 0; i < group.length; i++) {
    if (group[i].type === targetType) {
      var resultTank = group[i];
      return resultTank;
    }
  }
}

var fishPurchased = findFish (fish, fishWanted);
console.log(fishPurchased);
